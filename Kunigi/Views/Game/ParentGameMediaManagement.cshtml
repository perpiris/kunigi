@model ParentGameMediaViewModel

<style>
    .card {
        max-width: 200px;
        margin: 0 auto;
        height: 180px;
        position: relative;
        overflow: visible;
    }

    .card-body {
        height: 140px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .delete-btn {
        position: absolute;
        top: -10px;
        right: -10px;
        background-color: #dc3545;
        border: 2px solid #fff;
        border-radius: 50%;
        color: #fff;
        width: 30px;
        height: 30px;
        font-size: 1rem;
        display: flex;
        justify-content: center;
        align-items: center;
        cursor: pointer;
        z-index: 10;
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
        transition: all 0.3s ease;
    }

    .delete-btn:hover {
        background-color: #c82333;
        transform: scale(1.1);
    }

    .delete-btn:focus {
        outline: none;
        box-shadow: 0 0 0 3px rgba(220, 53, 69, 0.5);
    }

    .delete-btn i {
        position: relative;
        top: 1px;
    }

    .upload-card .card-body {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
    }

    .card-img-top, .video-thumbnail {
        height: 100px;
        object-fit: cover;
        cursor: pointer;
        position: relative;
    }

    .video-thumbnail .play-icon {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 2rem;
        color: white;
        text-shadow: 0 0 10px rgba(0,0,0,0.5);
    }

    .upload-card {
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .media-container {
        position: relative;
        width: 100%;
        max-height: 80vh;
        overflow: hidden;
    }

    #previewImage,
    #previewVideo {
        max-width: 100%;
        max-height: 100%;
        margin: auto;
        display: block;
    }

    .modal-content {
        background-color: #fff;
        border: 1px solid rgba(0,0,0,.2);
        border-radius: .3rem;
        outline: 0;
    }

    .video-thumbnail video {
        object-fit: cover;
        width: 100%;
        height: 100px;
    }

    #mediaPreviewModal .close {
        position: absolute;
        right: 20px;
        top: 20px;
        color: white;
        font-size: 30px;
        font-weight: bold;
        z-index: 1060;
        background: rgba(0, 0, 0, 0.7);
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        border: 2px solid white;
        box-shadow: 0 0 10px rgba(0,0,0,0.5);
    }

    #mediaPreviewModal .close:hover,
    #mediaPreviewModal .close:focus {
        color: #fff;
        text-decoration: none;
        opacity: 1;
        background: rgba(0, 0, 0, 0.9);
    }
</style>

@{
    ViewData["Title"] = $"{Model.Ttitle} ({Model.YearSlug})";
}

<div class="d-flex justify-content-between align-items-center">
    <div>
        <h2 class="mb-4">@ViewData["Title"]</h2>
        <h4 class="mb-4">Υλικό</h4>
    </div>

    <div class="d-flex justify-content-between align-items-center">
        <a asp-controller="Game" asp-action="ParentGameActions" asp-route-gameYear="@Model.YearSlug" class="btn btn-secondary">Πίσω</a>
    </div>
</div>

<div class="row row-cols-2 row-cols-md-4 row-cols-lg-6 g-3">
    <div class="col">
        <div class="card h-100 upload-card" data-bs-toggle="modal" data-bs-target="#uploadModal">
            <div class="card-body">
                <i class="bi bi-plus-circle" style="font-size: 3rem;"></i>
                <div class="mt-2">
                    <small class="text-muted">Προσθήκη</small>
                </div>
            </div>
        </div>
    </div>

    @foreach (var mediaFile in Model.MediaFiles)
    {
        <div class="col">
            <div class="card h-100">
                <div class="card-body p-2">
                    @if (IsVideo(mediaFile.FileName))
                    {
                        <div class="video-thumbnail" onclick="openMediaPreview('/@mediaFile.Path', 'video')">
                            <video preload="metadata" class="card-img-top mb-2">
                                <source src="~/@mediaFile.Path" type="video/mp4">
                            </video>
                            <i class="bi bi-play-circle-fill play-icon"></i>
                        </div>
                    }
                    else if (IsAudio(mediaFile.FileName))
                    {
                        <div class="audio-thumbnail" onclick="openMediaPreview('/@mediaFile.Path', 'audio')">
                            <i class="bi bi-file-earmark-music"></i>
                        </div>
                    }
                    else if (IsPdf(mediaFile.FileName))
                    {
                        <div class="pdf-thumbnail" onclick="openMediaPreview('/@mediaFile.Path', 'pdf')">
                            <i class="bi bi-file-earmark-pdf"></i>
                        </div>
                    }
                    else
                    {
                        <img src="~/@Url.Content(mediaFile.Path)" class="card-img-top mb-2" alt="@mediaFile.FileName" onclick="openMediaPreview('/@Url.Content(mediaFile.Path)', 'image')">
                    }
                    <h6 class="card-title mb-0 text-truncate" title="@mediaFile.FileName">@mediaFile.FileName</h6>
                </div>
                <form asp-action="DeleteParentGameMedia" asp-route-gameYear="@Model.YearSlug" asp-route-mediaId="@mediaFile.Id" method="post">
                    <button type="submit" class="delete-btn" onclick="return confirm('Σίγουρα θέλετε να διαγράψετε αυτό το αρχείο;')">
                        <i class="bi bi-trash"></i>
                    </button>
                </form>
            </div>
        </div>
    }
</div>

<div class="modal" id="uploadModal" tabindex="-1" aria-labelledby="uploadModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <form asp-action="UploadParentGameMedia" asp-route-gameYear="@Model.YearSlug" method="post" enctype="multipart/form-data">
                <div class="modal-header">
                    <h5 class="modal-title" id="uploadModalLabel">Προσθήκη Υλικού</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="NewMediaFiles" class="form-label">Επιλογή Αρχείων</label>
                        <input type="file" class="form-control" id="NewMediaFiles" name="NewMediaFiles" multiple required>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Πίσω</button>
                    <button type="submit" class="btn btn-primary">Προσθήκη</button>
                </div>
            </form>
        </div>
    </div>
</div>

<div class="modal" id="mediaPreviewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">&times;</button>
            <div class="media-container">
                <img id="previewImage" src="" alt="Preview" style="display: none;">
                <video id="previewVideo" controls style="display: none;">
                    <source src="" type="video/mp4">
                    Your browser does not support the video tag.
                </video>
                <audio id="previewAudio" controls style="display: none; width: 100%;">
                    Your browser does not support the audio element.
                </audio>
                <iframe id="previewPdf" style="display: none; width: 100%; height: 80vh; border: none;"></iframe>
            </div>
        </div>
    </div>
</div>

<script>
    let currentIndex = 0;
    const mediaItems = [];

    document.querySelectorAll(".video-thumbnail, .card-img-top, .audio-thumbnail, .pdf-thumbnail").forEach(item => {
        let type, src;
        if (item.classList.contains("video-thumbnail")) {
            src = item.querySelector("source").getAttribute("src");
            type = "video";
        } else if (item.classList.contains("audio-thumbnail")) {
            src = item.closest('.card').querySelector('.card-title').getAttribute('title');
            type = "audio";
        } else if (item.classList.contains("pdf-thumbnail")) {
            src = item.closest('.card').querySelector('.card-title').getAttribute('title');
            type = "pdf";
        } else {
            src = item.getAttribute("src");
            type = "image";
        }
        mediaItems.push({ src, type });
    });

    function openMediaPreview(src, type) {
        currentIndex = mediaItems.findIndex(item => item.src === src);
        updatePreviewModal(type, src);
    }

    function updatePreviewModal(type, src) {
        const modal = document.getElementById('mediaPreviewModal');
        const previewImage = document.getElementById('previewImage');
        const previewVideo = document.getElementById('previewVideo');
        const previewAudio = document.getElementById('previewAudio');
        const previewPdf = document.getElementById('previewPdf');

        [previewImage, previewVideo, previewAudio, previewPdf].forEach(el => el.style.display = 'none');

        switch (type) {
            case 'image':
                previewImage.src = src;
                previewImage.style.display = 'block';
                break;
            case 'video':
                previewVideo.innerHTML = '';
                let videoSource = document.createElement('source');
                videoSource.src = src;
                videoSource.type = 'video/mp4';
                previewVideo.appendChild(videoSource);
                previewVideo.style.display = 'block';
                previewVideo.load();
                break;
            case 'audio':
                previewAudio.src = src;
                previewAudio.style.display = 'block';
                break;
            case 'pdf':
                previewPdf.src = src;
                previewPdf.style.display = 'block';
                break;
        }

        const modalInstance = new bootstrap.Modal(modal);
        modalInstance.show();
    }

    document.getElementById('mediaPreviewModal').addEventListener('hidden.bs.modal', function () {
        const previewVideo = document.getElementById('previewVideo');
        const previewAudio = document.getElementById('previewAudio');

        if (previewVideo) {
            previewVideo.pause();
            previewVideo.currentTime = 0;
        }

        if (previewAudio) {
            previewAudio.pause();
            previewAudio.currentTime = 0;
        }
    });
</script>

@functions {

    static bool IsVideo(string fileName)
    {
        string[] videoExtensions = [".mp4", ".avi", ".mov", ".wmv"];
        return videoExtensions.Any(ext => fileName.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
    }

    static bool IsAudio(string fileName)
    {
        string[] audioExtensions = [".mp3", ".wav", ".ogg", ".m4a"];
        return audioExtensions.Any(ext => fileName.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
    }

    static bool IsPdf(string fileName)
    {
        return fileName.EndsWith(".pdf", StringComparison.OrdinalIgnoreCase);
    }

}