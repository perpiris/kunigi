@model GamePuzzleDetailsViewModel

@{
    ViewData["Title"] = Model.GameDetails.GameType;
}

<style>
    .py-8{padding-bottom:4.5rem!important;padding-top:4.5rem!important}
    .bsb-timeline-3{--bsb-tl-color:var(--bs-primary-bg-subtle);--bsb-tl-circle-color:var(--bs-primary);--bsb-tl-circle-border-color:var(--bs-warning);--bsb-tl-circle-size:26px;--bsb-tl-circle-border-size:4px;--bsb-tl-circle-offset:13px;--bsb-tl-indicator-color:var(--bs-white)}.bsb-timeline-3 .timeline{list-style:none;margin:0;padding:0;position:relative}.bsb-timeline-3 .timeline:after{background-color:var(--bsb-tl-color);bottom:0;content:"";left:0;margin-left:-1px;position:absolute;top:0;width:2px}@@media(min - width:768px){.bsb-timeline-3 .timeline:after{left:50%}}.bsb-timeline-3 .timeline>.timeline-item{margin:0;padding:0;position:relative}.bsb-timeline-3 .timeline>.timeline-item:after{background:var(--bsb-tl-circle-color);border:var(--bsb-tl-circle-border-size) solid var(--bsb-tl-circle-border-color);border-radius:50%;content:"";height:var(--bsb-tl-circle-size);left:calc(var(--bsb-tl-circle-offset)*-1);position:absolute;top:calc(30% - var(--bsb-tl-circle-offset));width:var(--bsb-tl-circle-size);z-index:1}.bsb-timeline-3 .timeline>.timeline-item .timeline-body{margin:0;padding:0;position:relative}.bsb-timeline-3 .timeline>.timeline-item .timeline-content{padding:0 0 2.5rem 2.5rem;position:relative}.bsb-timeline-3 .timeline>.timeline-item .timeline-indicator{position:relative}.bsb-timeline-3 .timeline>.timeline-item .timeline-indicator:after{border-width:1px;border:10px solid var(--bsb-tl-indicator-color);border-color:transparent var(--bsb-tl-indicator-color) transparent transparent;border-left-width:0;content:"";left:calc(2.5rem - 10px);position:absolute;top:calc(30% - var(--bsb-tl-circle-offset));z-index:2}@@media(min - width:768px){.bsb-timeline-3 .timeline>.timeline-item{overflow:hidden;width:50%}.bsb-timeline-3 .timeline>.timeline-item .timeline-content{padding:2.5rem}.bsb-timeline-3 .timeline>.timeline-item.left{left:0}.bsb-timeline-3 .timeline>.timeline-item.left:after{left:auto;right:calc(var(--bsb-tl-circle-offset)*-1)}.bsb-timeline-3 .timeline>.timeline-item.left .timeline-indicator:after{border-width:1px;border:10px solid var(--bsb-tl-indicator-color);border-color:transparent transparent transparent var(--bsb-tl-indicator-color);border-right-width:0;left:auto;right:calc(2.5rem - 10px)}.bsb-timeline-3 .timeline>.timeline-item.right{left:50%}}

    .media-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
        gap: 16px;
        margin-top: 16px;
    }

    .media-grid > .media-item {
        border: 1px solid #ddd;
        padding: 8px;
        border-radius: 4px;
        text-align: center;
        background-color: #f9f9f9;
    }

    .media-grid.single-item {
        grid-template-columns: repeat(2, minmax(150px, 1fr));
    }

    .group-indicator {
        background-color: #f8f9fa;
        border-left: 3px solid #007bff;
        padding: 10px;
        margin-bottom: 15px;
    }
</style>

<ol class="breadcrumb mb-4">
    <li class="breadcrumb-item">
        <a asp-controller="Game" asp-action="ParentGameList">Παιχνίδια</a>
    </li>
    <li class="breadcrumb-item">
        <a asp-controller="Game" asp-action="ParentGameDetails" asp-route-gameYear="@Model.GameDetails.Year">@($"{Model.GameDetails.Title} ({Model.GameDetails.Year})")</a>
    </li>
    <li class="breadcrumb-item active">@Model.GameDetails.GameType</li>
</ol>

<p class="lead mb-4">@Model.GameDetails.Description</p>

<section class="bsb-timeline-3 bg-light py-3 py-md-5 py-xl-8">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-10 col-md-12 col-xl-10 col-xxl-9">
                <ul class="timeline">
                    @{
                        var isLeft = true;
                        var currentGroup = (short?)-1;
                        var groupNumber = 1;
                    }
                    @foreach (var puzzle in Model.PuzzleList)
                    {
                        var orientation = isLeft ? "left" : "right";

                        if (puzzle.Group.HasValue && puzzle.Group != currentGroup)
                        {
                            currentGroup = puzzle.Group;
                            <li class="timeline-item @orientation">
                                <div class="timeline-body">
                                    <div class="timeline-content timeline-indicator">
                                        <div class="card border-0 shadow">
                                            <div class="card-body p-xl-4">
                                                <div class="group-indicator">
                                                    <h5 class="card-subtitle text-primary mb-1">Πακέτο @(groupNumber++)</h5>
                                                    <p class="m-0">Γρίφοι: @string.Join(", ", Model.GroupedPuzzles.First(g => g.GroupName == puzzle.Group.ToString()).Puzzles.Select(p => p.Order))</p>
                                                </div>
                                                @foreach (var groupPuzzle in Model.GroupedPuzzles.First(g => g.GroupName == puzzle.Group.ToString()).Puzzles)
                                                {
                                                    <div class="mb-4">
                                                        <h5 class="card-subtitle text-secondary mb-1">@($"{groupPuzzle.Order}ος Γρίφος")</h5>
                                                        <h2 class="card-title mb-3">@groupPuzzle.Type</h2>
                                                        @await Html.PartialAsync("_PuzzleContent", groupPuzzle)
                                                    </div>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        }
                        else if (!puzzle.Group.HasValue)
                        {
                            <li class="timeline-item @orientation">
                                <div class="timeline-body">
                                    <div class="timeline-content timeline-indicator">
                                        <div class="card border-0 shadow">
                                            <div class="card-body p-xl-4">
                                                <h5 class="card-subtitle text-secondary mb-1">@($"{puzzle.Order}ος Γρίφος")</h5>
                                                <h2 class="card-title mb-3">@puzzle.Type</h2>
                                                @await Html.PartialAsync("_PuzzleContent", puzzle)
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </li>
                        }

                        isLeft = !isLeft;
                    }
                </ul>
            </div>
        </div>
    </div>
</section>