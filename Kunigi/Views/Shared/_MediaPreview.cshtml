@model MediaFileViewModel

<div class="media-item" data-id="@Model.MediaFileId" data-type="@GetMediaType(Model.FileName)" data-path="@Url.Content($"~/{Model.Path}")">
    @switch (GetMediaType(Model.FileName))
    {
        case "image":
            <img src="@Url.Content($"~/{Model.Path}")" alt="" class="thumbnail"/>
            break;
        case "video":
            <div class="video-thumbnail">
                <video preload="metadata" muted>
                    <source src="@Url.Content($"~/{Model.Path}")" type="video/mp4">
                    Your browser does not support the video tag.
                </video>
            </div>
            break;
        case "audio":
            <div class="audio-thumbnail">
                <i class="bi bi-file-music"></i>
            </div>
            break;
        case "pdf":
            <div class="pdf-thumbnail">
                <i class="bi bi-filetype-pdf"></i>
            </div>
            break;
    }
</div>

<div id="mediaModal_@Model.MediaFileId" class="modal">
    <div class="modal-container">
        <span class="close">&times;</span>
        <div class="modal-content">
            <img id="modalImage_@Model.MediaFileId" src="" alt="" style="display: none;">
            <video id="modalVideo_@Model.MediaFileId" controls style="display: none;">
                <source src="" type="video/mp4">
                Your browser does not support the video tag.
            </video>
            <audio id="modalAudio_@Model.MediaFileId" controls style="display: none;">
                <source src="" type="audio/mpeg">
                Your browser does not support the audio element.
            </audio>
            <iframe id="modalPdf_@Model.MediaFileId" src="" style="display: none;"></iframe>
        </div>
    </div>
</div>

@functions {

    static string GetMediaType(string fileName)
    {
        var extension = fileName[(fileName.LastIndexOf('.') + 1)..].ToLowerInvariant();
        return extension switch
        {
            "jpg" or "jpeg" or "png" or "gif" or "bmp" => "image",
            "mp4" or "avi" or "mov" or "wmv" => "video",
            "mp3" or "wav" or "ogg" => "audio",
            "pdf" => "pdf",
            _ => "unknown"
        };
    }

}

<style>
    .media-item {
        cursor: pointer;
        text-align: center;
    }

    .thumbnail {
        width: 100%;
        height: 150px;
        object-fit: cover;
    }

    .video-thumbnail, .audio-thumbnail, .pdf-thumbnail {
        position: relative;
        width: 100%;
        height: 150px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f0f0f0;
    }

    .video-thumbnail video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .video-thumbnail i, .audio-thumbnail i, .pdf-thumbnail i {
        font-size: 3em;
        color: #333;
    }

    .audio-thumbnail span, .pdf-thumbnail span {
        position: absolute;
        bottom: 5px;
        left: 5px;
        right: 5px;
        font-size: 0.8em;
        background-color: rgba(255,255,255,0.7);
        padding: 2px;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.9);
        overflow: auto;
    }

    .modal-container {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
        width: auto;
        height: auto;
        max-width: 90vw;
        max-height: 90vh;
    }

    .modal-content img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    .modal-content video {
        max-width: 100%;
        max-height: 80vh;
        object-fit: contain;
    }

    .modal-content audio {
        width: 300px;
    }

    .modal-content iframe {
        width: 80vw;
        height: 80vh;
        border: none;
    }

    .close {
        position: absolute;
        top: 20px;
        right: 30px;
        color: #f1f1f1;
        font-size: 40px;
        font-weight: bold;
        transition: 0.3s;
        z-index: 1002;
    }

    .close:hover,
    .close:focus {
        color: #bbb;
        text-decoration: none;
        cursor: pointer;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        let mediaItem = document.querySelector('.media-item[data-id="@Model.MediaFileId"]');
        let modal = document.getElementById('mediaModal_@Model.MediaFileId');
        let modalImg = document.getElementById('modalImage_@Model.MediaFileId');
        let modalVideo = document.getElementById('modalVideo_@Model.MediaFileId');
        let modalAudio = document.getElementById('modalAudio_@Model.MediaFileId');
        let modalPdf = document.getElementById('modalPdf_@Model.MediaFileId');
        let closeBtn = modal.querySelector('.close');

        function showMedia() {
            let path = mediaItem.dataset.path;
            let type = mediaItem.dataset.type;

            modalImg.style.display = 'none';
            modalVideo.style.display = 'none';
            modalAudio.style.display = 'none';
            modalPdf.style.display = 'none';

            let modalContent = modal.querySelector('.modal-content');
            modalContent.style.width = 'auto';
            modalContent.style.height = 'auto';

            switch (type) {
                case 'image':
                    modalImg.src = path;
                    modalImg.style.display = 'block';
                    modalImg.onload = function() {
                        let aspectRatio = this.naturalWidth / this.naturalHeight;
                        let maxWidth = Math.min(this.naturalWidth, window.innerWidth * 0.9);
                        let maxHeight = Math.min(this.naturalHeight, window.innerHeight * 0.9);

                        if (aspectRatio > maxWidth / maxHeight) {
                            modalContent.style.width = maxWidth + 'px';
                            modalContent.style.height = (maxWidth / aspectRatio) + 'px';
                        } else {
                            modalContent.style.width = (maxHeight * aspectRatio) + 'px';
                            modalContent.style.height = maxHeight + 'px';
                        }
                    };
                    break;
                case 'video':
                    modalVideo.querySelector('source').src = path;
                    modalVideo.load();
                    modalVideo.style.display = 'block';
                    modalContent.style.width = '80vw';
                    modalContent.style.height = 'auto';
                    modalContent.style.background = 'none';
                    break;
                case 'audio':
                    modalAudio.querySelector('source').src = path;
                    modalAudio.load();
                    modalAudio.style.display = 'block';
                    modalContent.style.width = '300px';
                    modalContent.style.height = 'auto';
                    break;
                case 'pdf':
                    modalPdf.src = path;
                    modalPdf.style.display = 'block';
                    modalContent.style.width = '80vw';
                    modalContent.style.height = '80vh';
                    break;
            }
        }

        mediaItem.addEventListener('click', function() {
            showMedia();
            modal.style.display = 'block';
        });

        closeBtn.onclick = function() {
            modal.style.display = 'none';
            modalVideo.pause();
            modalAudio.pause();
        }

        window.addEventListener('click', function(event) {
            if (event.target === modal) {
                modal.style.display = 'none';
                modalVideo.pause();
                modalAudio.pause();
            }
        });

        document.addEventListener('keydown', function(e) {
            if (modal.style.display === 'block' && e.key === 'Escape') {
                closeBtn.click();
            }
        });
    });
</script>