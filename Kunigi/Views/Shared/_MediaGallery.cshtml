@model List<MediaFileViewModel>

<div class="media-gallery">
    @foreach (var item in Model)
    {
        <div class="media-item" data-id="@item.Id" data-type="@(IsImage(item.FileName) ? "image" : "video")" data-path="@Url.Content($"~/{item.Path}")">
            @if (IsImage(item.FileName))
            {
                <img src="@Url.Content($"~/{item.Path}")" alt="@item.FileName" class="thumbnail"/>
            }
            else if (IsVideo(item.FileName))
            {
                <div class="video-thumbnail">
                    <video preload="metadata" muted>
                        <source src="@Url.Content($"~/{item.Path}")" type="video/mp4">
                        Your browser does not support the video tag.
                    </video>
                    <i class="fas fa-play-circle"></i>
                </div>
            }
        </div>
    }
</div>

<div id="mediaModal" class="modal">
    <span class="close">&times;</span>
    <div class="modal-content">
        <img id="modalImage" src="" alt="" style="display: none;">
        <video id="modalVideo" controls style="display: none;">
            <source src="" type="video/mp4">
            Your browser does not support the video tag.
        </video>
    </div>
    <button id="prevBtn" class="nav-btn">&lt;</button>
    <button id="nextBtn" class="nav-btn">&gt;</button>
</div>

@functions {

    static bool IsImage(string fileName)
    {
        string[] imageExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".bmp" };
        return imageExtensions.Any(ext => fileName.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
    }

    static bool IsVideo(string fileName)
    {
        string[] videoExtensions = { ".mp4", ".avi", ".mov", ".wmv" };
        return videoExtensions.Any(ext => fileName.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
    }

}

<script>
    document.addEventListener('DOMContentLoaded', function() {
        let modal = document.getElementById('mediaModal');
        let modalImg = document.getElementById('modalImage');
        let modalVideo = document.getElementById('modalVideo');
        let modalVideoSource = modalVideo.querySelector('source');
        let closeBtn = document.getElementsByClassName('close')[0];
        let prevBtn = document.getElementById('prevBtn');
        let nextBtn = document.getElementById('nextBtn');
        let mediaItems = document.querySelectorAll('.media-item');
        let currentIndex = 0;

        function showMedia(index) {
            let item = mediaItems[index];
            let path = item.dataset.path;
            let isVideo = item.dataset.type === 'video';

            if (isVideo) {
                modalVideoSource.src = path;
                modalVideo.load();
                modalVideo.style.display = 'block';
                modalImg.style.display = 'none';
            } else {
                modalImg.src = path;
                modalImg.style.display = 'block';
                modalVideo.style.display = 'none';
                modalVideo.pause();
            }

            currentIndex = index;
            updateNavButtons();
        }

        function updateNavButtons() {
            prevBtn.style.display = currentIndex > 0 ? 'block' : 'none';
            nextBtn.style.display = currentIndex < mediaItems.length - 1 ? 'block' : 'none';
        }

        mediaItems.forEach(function(item, index) {
            item.addEventListener('click', function() {
                showMedia(index);
                modal.style.display = 'block';
            });
        });

        prevBtn.onclick = function() {
            if (currentIndex > 0) {
                showMedia(currentIndex - 1);
            }
        }

        nextBtn.onclick = function() {
            if (currentIndex < mediaItems.length - 1) {
                showMedia(currentIndex + 1);
            }
        }

        closeBtn.onclick = function() {
            modal.style.display = 'none';
            modalVideo.pause();
        }

        // Keyboard navigation
        document.addEventListener('keydown', function(e) {
            if (modal.style.display === 'block') {
                if (e.key === 'ArrowLeft' && currentIndex > 0) {
                    showMedia(currentIndex - 1);
                } else if (e.key === 'ArrowRight' && currentIndex < mediaItems.length - 1) {
                    showMedia(currentIndex + 1);
                } else if (e.key === 'Escape') {
                    closeBtn.click();
                }
            }
        });

        // Video thumbnail hover effect
        document.querySelectorAll('.video-thumbnail').forEach(function(thumbnail) {
            let video = thumbnail.querySelector('video');
            thumbnail.addEventListener('mouseenter', function() {
                video.play();
            });
            thumbnail.addEventListener('mouseleave', function() {
                video.pause();
                video.currentTime = 0;
            });
        });
    });
</script>

<style>
    .media-gallery {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 20px;
    }

    .media-item {
        cursor: pointer;
        text-align: center;
    }

    .thumbnail {
        width: 100%;
        height: 150px;
        object-fit: cover;
    }

    .video-thumbnail {
        position: relative;
        width: 100%;
        height: 150px;
        overflow: hidden;
    }

    .video-thumbnail video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .video-thumbnail i {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 3em;
        color: white;
        pointer-events: none;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.9);
    }

    .modal-content {
        margin: auto;
        display: block;
        width: 80%;
        max-width: 700px;
    }

    .modal-content img, .modal-content video {
        width: 100%;
        max-height: 80vh;
        object-fit: contain;
    }

    .close {
        position: absolute;
        top: 15px;
        right: 35px;
        color: #f1f1f1;
        font-size: 40px;
        font-weight: bold;
        transition: 0.3s;
    }

    .close:hover,
    .close:focus {
        color: #bbb;
        text-decoration: none;
        cursor: pointer;
    }

    .nav-btn {
        position: absolute;
        top: 50%;
        transform: translateY(-50%);
        background-color: rgba(0,0,0,0.5);
        color: white;
        border: none;
        padding: 15px;
        font-size: 24px;
        cursor: pointer;
        transition: 0.3s;
    }

    .nav-btn:hover {
        background-color: rgba(0,0,0,0.8);
    }

    #prevBtn {
        left: 20px;
    }

    #nextBtn {
        right: 20px;
    }
</style>