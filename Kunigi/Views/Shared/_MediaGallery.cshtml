@model List<MediaFileViewModel>

<style>
    #mediaGallery .card {
        max-width: 200px;
        margin: 0 auto;
    }

    #mediaGallery .card-img-top,
    #mediaGallery .video-thumbnail {
        height: 200px;
        object-fit: cover;
        cursor: pointer;
        position: relative;
    }

    #mediaGallery .video-thumbnail,
    #mediaGallery .play-icon {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        font-size: 2rem;
        color: white;
        text-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
    }

    #mediaGallery {
        position: relative;
        width: 100%;
        max-height: 80vh;
        overflow: hidden;
    }

    #previewImage,
    #previewVideo {
        max-width: 100%;
        max-height: 100%;
        margin: auto;
        display: block;
    }

    #mediaGallery .modal-content {
        background-color: #fff;
        border: 1px solid rgba(0, 0, 0, .2);
        border-radius: .3rem;
        outline: 0;
    }

    #mediaGallery .video-thumbnail video {
        object-fit: cover;
        width: 100%;
        height: 100px;
    }

    .close {
        position: absolute;
        right: 15px;
        top: 15px;
        color: white;
        font-size: 30px;
        font-weight: bold;
        z-index: 1050;
        background: rgba(0, 0, 0, 0.5);
        border-radius: 50%;
        width: 40px;
        height: 40px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
    }

    .close:hover,
    .close:focus {
        color: #fff;
        text-decoration: none;
        opacity: 0.75;
    }
</style>

<div class="row row-cols-2 row-cols-sm-3 row-cols-md-4 g-1" id="mediaGallery">
    @foreach (var mediaFile in Model)
    {
        <div class="col">
            <div class="card h-100">
                <div class="card-body">
                    @if (IsVideo(mediaFile.FileName))
                    {
                        <div class="video-thumbnail" onclick="openMediaPreview('@Url.Content(mediaFile.Path)', 'video')">
                            <video preload="metadata" class="card-img-top">
                                <source src="@Url.Content(mediaFile.Path)" type="video/mp4">
                            </video>
                            <i class="bi bi-play-circle-fill play-icon"></i>
                        </div>
                    }
                    else
                    {
                        <img src="@Url.Content(mediaFile.Path)" class="card-img-top" alt="@mediaFile.FileName"
                             onclick="openMediaPreview('@Url.Content(mediaFile.Path)', 'image')">
                    }
                </div>
            </div>
        </div>
    }
</div>

<div class="modal" id="mediaPreviewModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">&times;</button>
            <div class="media-container">
                <img id="previewImage" src="" alt="Preview" style="display: none;">
                <video id="previewVideo" controls style="display: none;">
                    <source src="" type="video/mp4">
                    Your browser does not support the video tag.
                </video>
            </div>
        </div>
    </div>
</div>

<script>
    function openMediaPreview(src, type) {
        updatePreviewModal(type, src);
    }

    function updatePreviewModal(type, src) {
        const modal = document.getElementById('mediaPreviewModal');
        const previewImage = document.getElementById('previewImage');
        const previewVideo = document.getElementById('previewVideo');

        if (type === 'image') {
            previewImage.src = src;
            previewImage.style.display = 'block';
            previewVideo.style.display = 'none';
            previewVideo.pause();
        } else if (type === 'video') {
            previewVideo.innerHTML = '';
            let source = document.createElement('source');
            source.src = src;
            source.type = 'video/mp4';
            previewVideo.appendChild(source);
            previewVideo.style.display = 'block';
            previewImage.style.display = 'none';
            previewVideo.load();
            previewVideo.play();
        }

        if (!modal.classList.contains('show')) {
            const modalInstance = new bootstrap.Modal(modal);
            modalInstance.show();
        }
    }

    document.getElementById('mediaPreviewModal').addEventListener('hidden.bs.modal', function () {
        document.getElementById('previewVideo').pause();
    });
</script>

@functions {
    static bool IsVideo(string fileName)
    {
        string[] videoExtensions = [".mp4", ".avi", ".mov", ".wmv"];
        return videoExtensions.Any(ext => fileName.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
    }
}}