@model List<MediaFileViewModel>

<div class="media-gallery">
    @foreach (var item in Model)
    {
        <div class="media-item" data-id="@item.Id" data-type="@GetMediaType(item.FileName)" data-path="@Url.Content($"~/{item.Path}")">
            @switch (GetMediaType(item.FileName))
            {
                case "image":
                    <img src="@Url.Content($"~/{item.Path}")" alt="@item.FileName" class="thumbnail"/>
                    break;
                case "video":
                    <div class="video-thumbnail">
                        <video preload="metadata" muted>
                            <source src="@Url.Content($"~/{item.Path}")" type="video/mp4">
                            Your browser does not support the video tag.
                        </video>
                    </div>
                    break;
                case "audio":
                    <div class="audio-thumbnail">
                        <i class="bi bi-file-music"></i>
                    </div>
                    break;
                case "pdf":
                    <div class="pdf-thumbnail">
                        <i class="bi bi-filetype-pdf"></i>
                    </div>
                    break;
            }
        </div>
    }
</div>

<div id="mediaModal" class="modal">
    <div class="modal-container">
        <span class="close">&times;</span>
        <div class="modal-content">
            <img id="modalImage" src="" alt="" style="display: none;">
            <video id="modalVideo" controls style="display: none;">
                <source src="" type="video/mp4">
                Your browser does not support the video tag.
            </video>
            <audio id="modalAudio" controls style="display: none;">
                <source src="" type="audio/mpeg">
                Your browser does not support the audio element.
            </audio>
            <iframe id="modalPdf" src="" style="display: none;"></iframe>
        </div>
        <button id="prevBtn" class="nav-btn">&lt;</button>
        <button id="nextBtn" class="nav-btn">&gt;</button>
    </div>
</div>

@functions {

    static string GetMediaType(string fileName)
    {
        var extension = fileName[(fileName.LastIndexOf('.') + 1)..].ToLowerInvariant();
        return extension switch
        {
            "jpg" or "jpeg" or "png" or "gif" or "bmp" or "svg" => "image",
            "mp4" or "avi" or "mov" or "wmv" => "video",
            "mp3" or "wav" or "ogg" => "audio",
            "pdf" => "pdf",
            _ => "unknown"
        };
    }
    
}

<style>
    .media-gallery {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 20px;
    }

    .media-item {
        cursor: pointer;
        text-align: center;
    }

    .thumbnail {
        width: 100%;
        height: 150px;
        object-fit: cover;
    }

    .video-thumbnail, .audio-thumbnail, .pdf-thumbnail {
        position: relative;
        width: 100%;
        height: 150px;
        overflow: hidden;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: #f0f0f0;
    }

    .video-thumbnail video {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }

    .video-thumbnail i, .audio-thumbnail i, .pdf-thumbnail i {
        font-size: 3em;
        color: #333;
    }

    .audio-thumbnail span, .pdf-thumbnail span {
        position: absolute;
        bottom: 5px;
        left: 5px;
        right: 5px;
        font-size: 0.8em;
        background-color: rgba(255,255,255,0.7);
        padding: 2px;
        text-overflow: ellipsis;
        overflow: hidden;
        white-space: nowrap;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0,0,0,0.9);
        overflow: auto;
    }

    .modal-container {
        position: relative;
        width: 100%;
        height: 100%;
        display: flex;
        justify-content: center;
        align-items: center;
    }

    .modal-content {
        position: relative;
        display: flex;
        justify-content: center;
        align-items: center;
        width: auto;
        height: auto;
        max-width: 90vw;
        max-height: 90vh;
    }

    .modal-content img {
        max-width: 100%;
        max-height: 100%;
        object-fit: contain;
    }

    .modal-content video {
        max-width: 100%;
        max-height: 80vh;
        object-fit: contain;
    }

    .modal-content audio {
        width: 300px;
    }

    .modal-content iframe {
        width: 80vw;
        height: 80vh;
        border: none;
    }

    .close {
        position: absolute;
        top: 20px;
        right: 30px;
        color: #f1f1f1;
        font-size: 40px;
        font-weight: bold;
        transition: 0.3s;
        z-index: 1002;
    }

    .close:hover,
    .close:focus {
        color: #bbb;
        text-decoration: none;
        cursor: pointer;
    }

    .nav-btn {
        position: fixed;
        top: 50%;
        transform: translateY(-50%);
        background-color: rgba(0,0,0,0.5);
        color: white;
        border: none;
        padding: 15px;
        font-size: 24px;
        cursor: pointer;
        transition: 0.3s;
        z-index: 1001;
    }

    #prevBtn {
        left: 20px;
    }

    #nextBtn {
        right: 20px;
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        let modal = document.getElementById('mediaModal');
        let modalImg = document.getElementById('modalImage');
        let modalVideo = document.getElementById('modalVideo');
        let modalAudio = document.getElementById('modalAudio');
        let modalPdf = document.getElementById('modalPdf');
        let closeBtn = document.getElementsByClassName('close')[0];
        let prevBtn = document.getElementById('prevBtn');
        let nextBtn = document.getElementById('nextBtn');
        let mediaItems = document.querySelectorAll('.media-item');
        let currentIndex = 0;

        function showMedia(index) {
            modalVideo.pause();
            modalAudio.pause();
            
            let item = mediaItems[index];
            let path = item.dataset.path;
            let type = item.dataset.type;

            modalImg.style.display = 'none';
            modalVideo.style.display = 'none';
            modalAudio.style.display = 'none';
            modalPdf.style.display = 'none';

            let modalContent = document.querySelector('.modal-content');
            modalContent.style.width = 'auto';
            modalContent.style.height = 'auto';

            switch (type) {
                case 'image':
                    modalImg.src = path;
                    modalImg.style.display = 'block';
                    modalImg.onload = function() {
                        let aspectRatio = this.naturalWidth / this.naturalHeight;
                        let maxWidth = Math.min(this.naturalWidth, window.innerWidth * 0.9);
                        let maxHeight = Math.min(this.naturalHeight, window.innerHeight * 0.9);

                        if (aspectRatio > maxWidth / maxHeight) {
                            modalContent.style.width = maxWidth + 'px';
                            modalContent.style.height = (maxWidth / aspectRatio) + 'px';
                        } else {
                            modalContent.style.width = (maxHeight * aspectRatio) + 'px';
                            modalContent.style.height = maxHeight + 'px';
                        }
                    };
                    break;
                case 'video':
                    modalVideo.querySelector('source').src = path;
                    modalVideo.load();
                    modalVideo.style.display = 'block';
                    modalContent.style.width = '80vw';
                    modalContent.style.height = 'auto';
                    modalContent.style.background = 'none';
                    break;
                case 'audio':
                    modalAudio.querySelector('source').src = path;
                    modalAudio.load();
                    modalAudio.style.display = 'block';
                    modalContent.style.width = '300px';
                    modalContent.style.height = 'auto';
                    break;
                case 'pdf':
                    modalPdf.src = path;
                    modalPdf.style.display = 'block';
                    modalContent.style.width = '80vw';
                    modalContent.style.height = '80vh';
                    break;
            }

            currentIndex = index;
        }

        function updateNavigationButtons() {
            if (mediaItems.length <= 1) {
                prevBtn.style.display = 'none';
                nextBtn.style.display = 'none';
            } else {
                prevBtn.style.display = 'block';
                nextBtn.style.display = 'block';
            }
        }

        mediaItems.forEach(function(item, index) {
            item.addEventListener('click', function() {
                showMedia(index);
                modal.style.display = 'block';
                updateNavigationButtons();
            });
        });

        prevBtn.onclick = function() {
            currentIndex = (currentIndex - 1 + mediaItems.length) % mediaItems.length;
            showMedia(currentIndex);
        }

        nextBtn.onclick = function() {
            currentIndex = (currentIndex + 1) % mediaItems.length;
            showMedia(currentIndex);
        }

        closeBtn.onclick = function() {
            modal.style.display = 'none';
            modalVideo.pause();
            modalAudio.pause();
        }

        document.addEventListener('keydown', function(e) {
            if (modal.style.display === 'block') {
                if (e.key === 'ArrowLeft') {
                    prevBtn.click();
                } else if (e.key === 'ArrowRight') {
                    nextBtn.click();
                } else if (e.key === 'Escape') {
                    closeBtn.click();
                }
            }
        });

        updateNavigationButtons();
    });
</script>